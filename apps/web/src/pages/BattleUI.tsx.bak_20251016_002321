import { useState } from "react";
import { motion } from "framer-motion";
import axios from "axios";

// Ícones simples por função
const roleIcon: Record<string, string> = { tank: "🛡️", mago: "🪄", assassino: "🗡️", adc: "🏹" };
type Color = "B" | "R" | "G" | "Y";

export default function BattleUI() {
  const [battle, setBattle] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  const [sel, setSel] = useState<null | { playerId: string; charId: string; skillId: string }>(null);
  const [queue, setQueue] = useState<any[]>([]);
  const [submitting, setSubmitting] = useState(false);
  const [logConsole, setLogConsole] = useState<string[]>([]);

  async function startBattle() {
    setLoading(true);
    try {
      const res = await axios.post("/api/start");
      setBattle(res.data.battle);
      setLogConsole((prev) => [
        ...prev,
        "🕹️ Nova batalha iniciada!",
        `Turno ${res.data.battle.turn}`,
      ]);
      setQueue([]);
      setSel(null);
    } catch (err) {
      console.error(err);
      setLogConsole((prev) => [...prev, "⚠️ Erro ao iniciar batalha"]);
    } finally {
      setLoading(false);
    }
  }

  const currentPlayerId: string | null = battle?.currentPlayerId ?? null;
  const energy = (pid: string) => battle?.energy?.[pid] ?? {};

  function canPay(pid: string, cost: Record<Color, number>) {
    const pool = energy(pid);
    return Object.entries(cost ?? {}).every(([c, q]: any) => (pool?.[c] ?? 0) >= (q ?? 0));
  }

  function toggleSkill(pId: string, cId: string, skill: any) {
    if (pId !== currentPlayerId) return;
    if (!canPay(pId, skill.cost || {})) return;
    if (sel && sel.playerId === pId && sel.charId === cId && sel.skillId === skill.id) {
      setSel(null);
    } else {
      setSel({ playerId: pId, charId: cId, skillId: skill.id });
    }
  }

  function clickTarget(pId: string, cId: string) {
    if (!sel) return;
    if (pId === sel.playerId) return;

    const action = {
      source: { playerId: sel.playerId, charId: sel.charId },
      target: { playerId: pId, charId: cId },
      skillId: sel.skillId,
    };
    setQueue((q) => [...q, action]);
    setSel(null);
  }

  async function passTurn() {
    if (!battle || queue.length === 0) return;
    setSubmitting(true);
    try {
      const res = await axios.post("/api/turn", { battleId: battle.id, actions: queue });
      setBattle(res.data.battle);
      setQueue([]);
      setSel(null);

      const lines = (res.data.results ?? []).map((r: any) => {
        if (!r.ok) return `❌ Falha: ${r.reason}`;
        if (r.type === "damage") return `⚔️ ${r.skill} causou ${r.amount} em ${r.target}`;
        if (r.type === "heal") return `💚 ${r.skill} curou ${r.amount} em ${r.target}`;
        return JSON.stringify(r);
      });

      setLogConsole((prev) => [
        ...prev.slice(-30),
        `--- TURNO ${res.data.battle.turn - 1} ---`,
        ...lines,
      ]);
    } catch (err) {
      console.error(err);
      setLogConsole((prev) => [...prev, "⚠️ Erro no turno"]);
    } finally {
      setSubmitting(false);
    }
  }

  if (!battle) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen text-white bg-gray-900">
        <h1 className="text-3xl font-bold mb-6">Arena Multiverso ⚔️</h1>
        <button
          onClick={startBattle}
          disabled={loading}
          className="px-6 py-3 bg-indigo-600 hover:bg-indigo-700 rounded-2xl font-semibold transition-all"
        >
          {loading ? "Iniciando..." : "🕹️ Iniciar Batalha"}
        </button>
        <p className="mt-3 text-xs opacity-70">Clique em “Iniciar” para gerar a batalha.</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen text-white bg-gray-900">
      {/* Topbar */}
      <div className="backdrop-blur-sm bg-black/40">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <span className="text-lg font-semibold tracking-wide">Arena Multiverso — Clássico</span>
          </div>
          <div className="text-sm opacity-80">
            Turno <span className="font-semibold">{battle.turn}</span> • Atual:{" "}
            <span className="font-semibold">{battle.currentPlayerId}</span>
          </div>
        </div>
      </div>

      {/* Painel de Logs */}
      <div className="max-w-6xl mx-auto px-4 pb-8 mt-6">
        <div className="rounded-2xl border border-white/10 bg-black/40 p-3 h-48 overflow-y-auto text-xs font-mono">
          {logConsole.slice().reverse().map((line, i) => (
            <div key={i} className="opacity-80">{line}</div>
          ))}
        </div>
      </div>
    </div>
  );
}

